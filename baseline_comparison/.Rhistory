names(plot) <- toupper(id_mod)
zvalues <- seq(0, 2000, 100) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("khaki1", "skyblue1", "blue", "darkblue", "darkmagenta"))(length(zvalues)-1) # Set new colors
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
# myTheme=rasterTheme(region=brewer.pal('Blues', n=9))
} else {
stk_crop[which(stk_crop[]< -5 )]= -5
stk_crop[which(stk_crop[]> 45 )]= 45
plot <- setZ(stk_crop, id_mod)
names(plot) <- id_mod
zvalues <- seq(-5, 45, 5)
myTheme <- BuRdTheme()
myTheme$regions$col=colorRampPalette(c("darkblue", "yellow", "orange", "red", "darkred"))(length(zvalues)-1)
myTheme$strip.border$col = "white"
myTheme$axis.line$col = 'white'
# myTheme=rasterTheme(region=brewer.pal('YlOrRd', n=9))
}
tiff(paste(oDir, "/plot_seasonal_clim_", var, ".tif", sep=""), width=1600, height=1200, pointsize=8, compression='lzw',res=200)
print(levelplot(plot, at = zvalues,
scales = list(draw=FALSE),
layout=c(2, 2),
xlab="",
ylab="",
par.settings = myTheme,
# margin=F,
colorkey = list(space = "bottom", width=1.2, height=1, labels=list(cex=1.2)))
+ layer(sp.polygons(mask, lwd=0.8))
)
dev.off()
}
#############################
#### 02 Plots by seasons ####
#############################
# Load libraries
require(raster)
require(rasterVis)
require(maptools)
require(rgdal)
library(grid)
# Set params
id <- c("djf", "mam", "jja", "son")
id_mod <-c("DEF", "MAM", "JJA", "SON")
for (var in varList){
stk_crop <- stack(paste0(bDir, "/", var, "_", id, ".tif"))
stk_crop <- mask(crop(stk_crop, extent(mask)), mask)
if (var == "prec"){
stk_crop[which(stk_crop[]>2000)]=2000
plot <- setZ(stk_crop, id_mod)
names(plot) <- toupper(id_mod)
zvalues <- seq(0, 2000, 100) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("khaki1", "skyblue1", "blue", "darkblue", "darkmagenta"))(length(zvalues)-1) # Set new colors
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
# myTheme=rasterTheme(region=brewer.pal('Blues', n=9))
} else {
stk_crop[which(stk_crop[]< -5 )]= -5
stk_crop[which(stk_crop[]> 45 )]= 45
plot <- setZ(stk_crop, id_mod)
names(plot) <- id_mod
zvalues <- seq(-5, 45, 5)
myTheme <- BuRdTheme()
myTheme$regions$col=colorRampPalette(c("darkblue", "yellow", "orange", "red", "darkred"))(length(zvalues)-1)
myTheme$strip.border$col = "white"
myTheme$axis.line$col = 'white'
# myTheme=rasterTheme(region=brewer.pal('YlOrRd', n=9))
}
tiff(paste(oDir, "/plot_seasonal_clim_", var, ".tif", sep=""), width=1800, height=1200, pointsize=8, compression='lzw',res=200)
print(levelplot(plot, at = zvalues,
scales = list(draw=FALSE),
layout=c(2, 2),
xlab="",
ylab="",
par.settings = myTheme,
# margin=F,
colorkey = list(space = "bottom", width=1.2, height=1, labels=list(cex=1.2)))
+ layer(sp.polygons(mask, lwd=0.8))
)
dev.off()
}
##########################
#### 03 Annual Plots  ####
##########################
id <- c("ANN")
id_mod <-c("ANUAL")
setwd(bDir)
if (!file.exists(oDir)) {dir.create(oDir)}
for (var in varList){
stk_crop <- stack(paste0(bDir, "/", var, "_", id, ".tif"))
stk_crop <- mask(crop(stk_crop, extent(mask)), mask)
if (var == "prec"){
stk_crop[which(stk_crop[]>5000)]=5000
plot <- setZ(stk_crop, id_mod)
names(plot) <- toupper(id_mod)
zvalues <- seq(0, 5000, 200) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("khaki1", "skyblue1", "blue", "darkblue", "darkmagenta"))(length(zvalues)-1) # Set new colors
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
# myTheme=rasterTheme(region=brewer.pal('Blues', n=9))
} else {
stk_crop[which(stk_crop[] < -5 )] = -5
stk_crop[which(stk_crop[] > 45 )] = 45
plot <- setZ(stk_crop, id)
names(plot) <- id
zvalues <- seq(-5, 45, 5)
myTheme <- BuRdTheme()
myTheme$regions$col=colorRampPalette(c("darkblue", "yellow", "orange", "red", "darkred"))(length(zvalues)-1)
myTheme$strip.border$col = "white"
myTheme$axis.line$col = 'white'
# myTheme=rasterTheme(region=brewer.pal('YlOrRd', n=9))
}
tiff(paste(oDir, "/plot_annual_clim_", var, ".tif", sep=""), width=1800, height=1200, pointsize=8, compression='lzw',res=200)
print(levelplot(plot, at = zvalues,
scales = list(draw=FALSE),
# layout=c(2, 2),
xlab="",
ylab="",
par.settings = myTheme,
margin=F,
colorkey = list(space = "bottom", width=1.2, height=1, labels=list(cex=1.2)))
+ layer(sp.polygons(mask, lwd=0.8))
)
dev.off()
}
#############################
#### 02 Plots by seasons ####
#############################
# Load libraries
require(raster)
require(rasterVis)
require(maptools)
require(rgdal)
library(grid)
# Set params
id <- c("djf", "mam", "jja", "son")
id_mod <-c("DEF", "MAM", "JJA", "SON")
for (var in varList){
stk_crop <- stack(paste0(bDir, "/", var, "_", id, ".tif"))
stk_crop <- mask(crop(stk_crop, extent(mask)), mask)
if (var == "prec"){
stk_crop[which(stk_crop[]>2000)]=2000
plot <- setZ(stk_crop, id_mod)
names(plot) <- toupper(id_mod)
zvalues <- seq(0, 2000, 100) # Define limits
myTheme <- BuRdTheme() # Define squeme of colors
myTheme$regions$col=colorRampPalette(c("khaki1", "skyblue1", "blue", "darkblue", "darkmagenta"))(length(zvalues)-1) # Set new colors
myTheme$strip.border$col = "white" # Eliminate frame from maps
myTheme$axis.line$col = 'white' # Eliminate frame from maps
# myTheme=rasterTheme(region=brewer.pal('Blues', n=9))
} else {
stk_crop[which(stk_crop[]< -5 )]= -5
stk_crop[which(stk_crop[]> 45 )]= 45
plot <- setZ(stk_crop, id_mod)
names(plot) <- id_mod
zvalues <- seq(-5, 45, 5)
myTheme <- BuRdTheme()
myTheme$regions$col=colorRampPalette(c("darkblue", "yellow", "orange", "red", "darkred"))(length(zvalues)-1)
myTheme$strip.border$col = "white"
myTheme$axis.line$col = 'white'
# myTheme=rasterTheme(region=brewer.pal('YlOrRd', n=9))
}
tiff(paste(oDir, "/plot_seasonal_clim_", var, ".tif", sep=""), width=1800, height=1300, pointsize=8, compression='lzw',res=200)
print(levelplot(plot, at = zvalues,
scales = list(draw=FALSE),
layout=c(2, 2),
xlab="",
ylab="",
par.settings = myTheme,
# margin=F,
colorkey = list(space = "bottom", width=1.2, height=1, labels=list(cex=1.2)))
+ layer(sp.polygons(mask, lwd=0.8))
)
dev.off()
}
# Carlos Navarro
# UNIGIS 2020A
# Purpose: Statistics of climate projections
# Load libraries
require(raster)
require(maptools)
require(rgdal)
require(dismo)
# Set params
cDir <- "D:/cenavarro/msc_gis_thesis/01_baseline/wcl_v21_2_5min"
fDir <- "D:/cenavarro/msc_gis_thesis/02_climate_change/camexca_2_5min_anom_ens"
varLs <- c("prec", "tmean", "tmax", "tmin")
oDir <- "D:/cenavarro/msc_gis_thesis/02_climate_change/evaluations/statistics"
mask <- "D:/cenavarro/msc_gis_thesis/00_admin_data/CAMEXCA_adm0.shp"
sspLs <- c("ssp_126", "ssp_245", "ssp_585")
prdLs <- c("2030s", "2050s", "2070s")
ssnLs <- c("djf", "mam", "jja", "son", "ann")
if (!file.exists(paste0(oDir))) {dir.create(paste0(oDir), recursive = TRUE)}
# Read mask
poly <- readOGR(mask)
poly$CTR_CODE <- c(1:nrow(poly))
id <- "CTR_CODE"
#####################################
### Climate statistics by month #####
#####################################
# Open empty data frame
stats <- c()
## Looping vars
for (var in varLs){
# Load current climate files
cStk <- stack(paste0(cDir, "/", var, "_", 1:12, ".tif"))
## Rasterize polygon
cStk_crop <- crop(cStk, extent(poly))
extent(cStk_crop) <- extent(poly)
poly_rs <- rasterize(poly, cStk_crop[[1]], id)
## Calculate stats for current
cStk_stat <- zonal(cStk_crop, poly_rs, mean)
stats <- rbind(stats, cbind("current", "1971-2000", var, "mean", cStk_stat))
cat(paste("\n >. Calcs stats current", var))
for (ssp in sspLs){
for (prd in prdLs){
# Load future climate files
fStk <- stack(paste0(fDir, "/", ssp, "/", prd, "/", var, "_", 1:12, "_avg.tif"))
fStk_crop <- crop(fStk, extent(poly))
extent(fStk_crop) <- extent(poly)
poly_rs <- rasterize(poly, fStk_crop[[1]], id)
## Calculate stats for future
fStk_stat <- zonal(fStk_crop, poly_rs, mean)
stats <- rbind(stats, cbind(ssp, prd, var, "mean", fStk_stat))
# Load future climate files (STD)
fStk <- stack(paste0(fDir, "/", ssp, "/", prd, "/", var, "_", 1:12, "_std.tif"))
fStk_crop <- crop(fStk, extent(poly))
extent(fStk_crop) <- extent(poly)
poly_rs <- rasterize(poly, fStk_crop[[1]], id)
## Calculate stats for future (STD)
fStk_stat <- zonal(fStk_crop, poly_rs, mean)
stats <- rbind(stats, cbind(ssp, prd, var, "std", fStk_stat))
# Load future climate files (Q25)
fStk <- stack(paste0(fDir, "/", ssp, "/", prd, "/", var, "_", 1:12, "_q25.tif"))
fStk_crop <- crop(fStk, extent(poly))
extent(fStk_crop) <- extent(poly)
poly_rs <- rasterize(poly, fStk_crop[[1]], id)
## Calculate stats for future (Q25)
fStk_stat <- zonal(fStk_crop, poly_rs, mean)
stats <- rbind(stats, cbind(ssp, prd, var, "q25", fStk_stat))
# Load future climate files (Q75)
fStk <- stack(paste0(fDir, "/", ssp, "/", prd, "/", var, "_", 1:12, "_q75.tif"))
fStk_crop <- crop(fStk, extent(poly))
extent(fStk_crop) <- extent(poly)
poly_rs <- rasterize(poly, fStk_crop[[1]], id)
## Calculate stats for future (Q75)
fStk_stat <- zonal(fStk_crop, poly_rs, mean)
stats <- rbind(stats, cbind(ssp, prd, var, "q75", fStk_stat))
cat(paste("\n >. Calcs stats", ssp, prd, var))
}
}
}
## Set colnames stat table
colnames(stats) <- c("ssp", "Period", "Variable", "Stat", "Zone", 1:12)
# Write the outputs
write.csv(stats, paste0(oDir, "/climate_stats_by_month.csv"), row.names=F)
cat("\nDone!!!")
#####################################
### Climate statistics by season ####
#####################################
# Open empty data frame
stats <- c()
## Looping vars
for (var in varLs){
cat(paste("\nCalcs stats", var))
# Load current climate files
cStk <- stack(paste0(cDir, "/", var, "_", ssnLs, ".tif"))
## Rasterize polygon
cStk_crop <- crop(cStk, extent(poly))
extent(cStk_crop) <- extent(poly)
poly_rs <- rasterize(poly, cStk_crop[[1]], id)
## Calculate stats for current
cStk_stat <- zonal(cStk_crop, poly_rs, mean)
stats <- rbind(stats, cbind("current", "1971-2000", var, "mean", cStk_stat))
cat(paste("\n >. Calcs stats current", var))
for (ssp in sspLs){
for (prd in prdLs){
# Load future climate files
fStk <- stack(paste0(fDir, "/", ssp, "/", prd, "/", var, "_", ssnLs, "_avg.tif"))
fStk_crop <- crop(fStk, extent(poly))
extent(fStk_crop) <- extent(poly)
poly_rs <- rasterize(poly, fStk_crop[[1]], id)
## Calculate stats for future
fStk_stat <- zonal(fStk_crop, poly_rs, mean)
stats <- rbind(stats, cbind(ssp, prd, var, "mean", fStk_stat))
# Load future climate files (STD)
fStk <- stack(paste0(fDir, "/", ssp, "/", prd, "/", var, "_", ssnLs, "_std.tif"))
fStk_crop <- crop(fStk, extent(poly))
extent(fStk_crop) <- extent(poly)
poly_rs <- rasterize(poly, fStk_crop[[1]], id)
## Calculate stats for future (STD)
fStk_stat <- zonal(fStk_crop, poly_rs, mean)
stats <- rbind(stats, cbind(ssp, prd, var, "std", fStk_stat))
# Load future climate files (Q25)
fStk <- stack(paste0(fDir, "/", ssp, "/", prd, "/", var, "_", ssnLs, "_q25.tif"))
fStk_crop <- crop(fStk, extent(poly))
extent(fStk_crop) <- extent(poly)
poly_rs <- rasterize(poly, fStk_crop[[1]], id)
## Calculate stats for future (Q25)
fStk_stat <- zonal(fStk_crop, poly_rs, mean)
stats <- rbind(stats, cbind(ssp, prd, var, "q25", fStk_stat))
# Load future climate files (Q75)
fStk <- stack(paste0(fDir, "/", ssp, "/", prd, "/", var, "_", ssnLs, "_q75.tif"))
fStk_crop <- crop(fStk, extent(poly))
extent(fStk_crop) <- extent(poly)
poly_rs <- rasterize(poly, fStk_crop[[1]], id)
## Calculate stats for future (Q75)
fStk_stat <- zonal(fStk_crop, poly_rs, mean)
stats <- rbind(stats, cbind(ssp, prd, var, "q75", fStk_stat))
cat(paste("\n >. Calcs stats", ssp, prd, var))
}
}
}
## Set colnames stat table
colnames(stats) <- c("ssp", "Period", "Variable", "Stat", "Zone", ssnLs)
# Write the outputs
write.csv(stats, paste0(oDir, "/climate_stats_by_season.csv"), row.names=F)
cat("\nDone!!!")
#################################################################################
#################################################################################
#Summarise metrics at the country level
#################################################################################
#################################################################################
#Summaries
source("summariseComparisons.R")
#Julian Ramirez
#University of Leeds / CIAT
#2011
repoDir <- "D:/_scripts/cc-crop-impacts-central-america"
srcDir <- paste(repoDir, "/baseline_comparison", sep="")
setwd(srcDir)
#################################################################################
#################################################################################
#GCM vs. WCL grids (RAIN, TMEAN)
#################################################################################
#################################################################################
library(rgdal)
source("compareRasterRaster.R")
mDataDir <- "D:/cenavarro/msc_gis_thesis/01_baseline"
oDir <- paste(mDataDir, "/skill_gcm", sep="")
if (!file.exists(oDir)) {
dir.create(oDir)
}
md <- paste(mDataDir, "/gcm_data/1970_2000", sep="")
gcmList <- list.files(md)
cat(gcmList)
cd <- paste(mDataDir, "/wcl_v21_2_5min", sep="")
# shd <- "D:/cenavarro/msc_gis_thesis/00_admin_data"
shd <- "D:/cenavarro/msc_gis_thesis/00_admin_data/by_country"
# cList <- c("CAMEXCA")
# cList <- c("BHS", "BLZ", "CRI", "CUB", "DOM", "GTM", "HND", "HTI", "JAM", "NIC", "PAN", "PRI", "SLV", "NIC", "PAN", "PRI", "SLV")
cList <- c("MEX")
mam <- paste(oDir, "/wcl-vs-gcm/MAM", sep="")
son <- paste(oDir, "/wcl-vs-gcm/SON", sep="")
jja <- paste(oDir, "/wcl-vs-gcm/JJA", sep="")
djf <- paste(oDir, "/wcl-vs-gcm/DJF", sep="")
ann <- paste(oDir, "/wcl-vs-gcm/ANNUAL",sep="")
# ### Resample WLC to 1deg
# listWCL <-  list.files(paste0(cd), recursive = F, full.names = T,pattern = paste0(".tif"))
# mask1deg <- raster(nrows=180, ncols=360, xmn=-180, xmx=180, ymn=-90, ymx=90, res=1, vals=1)
# mask1deg_reg <- crop(mask1deg, extent(raster(listWCL[1])))
# oWclDir <- paste(mDataDir, "/wcl_v2_1deg", sep="")
# if (!file.exists(oWclDir)) {dir.create(oWclDir)}
# for (i in 1:length(listWCL)){
#   writeRaster(resample(raster(listWCL[i]), mask1deg_reg), paste0(oWclDir, "/", basename(listWCL[i])))
# }
if (!file.exists(mam)) {
dir.create(mam, recursive = T)
}
if (!file.exists(son)) {
dir.create(son, recursive = T)
}
if (!file.exists(jja)) {
dir.create(jja, recursive = T)
}
if (!file.exists(djf)) {
dir.create(djf, recursive = T)
}
if (!file.exists(ann)) {
dir.create(ann, recursive = T)
}
#################################################################################
#################################################################################
#Summarise metrics at the country level
#################################################################################
#################################################################################
#Summaries
source("summariseComparisons.R")
bDir <- "D:/cenavarro/msc_gis_thesis/01_baseline/skill_gcm"
variableLs <- c("prec", "tmean")
isoALL <- c("CAMEXCA", "BHS", "BLZ", "CRI", "CUB", "DOM", "GTM", "HND", "HTI", "JAM", "MEX", "NIC", "PAN", "PRI", "SLV")
dataset <- "wcl"
# isoALL <- c("CAMEXCA", "BHS", "CRI", "CUB", "DOM", "GTM", "HND", "JAM", "MEX", "NIC", "PAN", "SLV")
# dataset <- "whst"
for (variable in variableLs){
metricsSummary(bDir, dataset, variable)
dataSummary(bDir, dataset, variable)
}
#Summaries
source("summariseComparisons.R")
bDir <- "D:/cenavarro/msc_gis_thesis/01_baseline/skill_gcm"
variableLs <- c("prec", "tmean")
isoALL <- c("CAMEXCA", "BHS", "BLZ", "CRI", "CUB", "DOM", "GTM", "HND", "HTI", "JAM", "MEX", "NIC", "PAN", "PRI", "SLV")
dataset <- "wcl"
# isoALL <- c("CAMEXCA", "BHS", "CRI", "CUB", "DOM", "GTM", "HND", "JAM", "MEX", "NIC", "PAN", "SLV")
# dataset <- "whst"
for (variable in variableLs){
metricsSummary(bDir, dataset, variable)
dataSummary(bDir, dataset, variable)
}
f.dir <- "D:/cenavarro/msc_gis_thesis/01_baseline/skill_gcm/_summaries"
generateBoxplots(fd=f.dir)
for (vn in variableLs) {
# for (dset in c("whst", "wcl")) {
for (prd in c("ANNUAL","DJF","JJA","MAM","SON")) {
if (file.exists(paste(f.dir,"/",vn,"-",dset,"-vs-gcm-summaryMetrics.csv",sep=""))) {
createColoured(fDir=f.dir, variable=vn, dataset=dset, month="total", period=prd, metric="R2.FORCED")
}
}
# }
}
dset
#################################################################################
#################################################################################
#Summarise metrics at the country level
#################################################################################
#################################################################################
#Summaries
source("summariseComparisons.R")
bDir <- "D:/cenavarro/msc_gis_thesis/01_baseline/skill_gcm"
variableLs <- c("prec", "tmean")
# isoALL <- c("CAMEXCA", "BHS", "BLZ", "CRI", "CUB", "DOM", "GTM", "HND", "HTI", "JAM", "MEX", "NIC", "PAN", "PRI", "SLV")
# dset <- "wcl"
isoALL <- c("CAMEXCA", "BHS", "CRI", "CUB", "DOM", "GTM", "HND", "JAM", "MEX", "NIC", "PAN", "SLV")
dset <- "whst"
for (variable in variableLs){
metricsSummary(bDir, dataset, variable)
dataSummary(bDir, dataset, variable)
}
#Summaries
source("summariseComparisons.R")
bDir <- "D:/cenavarro/msc_gis_thesis/01_baseline/skill_gcm"
variableLs <- c("prec", "tmean")
isoALL <- c("CAMEXCA", "BHS", "BLZ", "CRI", "CUB", "DOM", "GTM", "HND", "HTI", "JAM", "MEX", "NIC", "PAN", "PRI", "SLV")
dataset <- "wcl"
# isoALL <- c("CAMEXCA", "BHS", "CRI", "CUB", "DOM", "GTM", "HND", "JAM", "MEX", "NIC", "PAN", "SLV")
# dataset <- "whst"
for (variable in variableLs){
metricsSummary(bDir, dataset, variable)
dataSummary(bDir, dataset, variable)
}
#Summaries
source("summariseComparisons.R")
bDir <- "D:/cenavarro/msc_gis_thesis/01_baseline/skill_gcm"
variableLs <- c("prec", "tmean")
# isoALL <- c("CAMEXCA", "BHS", "BLZ", "CRI", "CUB", "DOM", "GTM", "HND", "HTI", "JAM", "MEX", "NIC", "PAN", "PRI", "SLV")
# dataset <- "wcl"
isoALL <- c("CAMEXCA", "BHS", "CRI", "CUB", "DOM", "GTM", "HND", "JAM", "MEX", "NIC", "PAN", "SLV")
dataset <- "whst"
for (variable in variableLs){
metricsSummary(bDir, dataset, variable)
dataSummary(bDir, dataset, variable)
}
f.dir <- "D:/cenavarro/msc_gis_thesis/01_baseline/skill_gcm/_summaries"
generateBoxplots(fd=f.dir)
for (vn in variableLs) {
for (dset in c("whst", "wcl")) {
for (prd in c("ANNUAL","DJF","JJA","MAM","SON")) {
if (file.exists(paste(f.dir,"/",vn,"-",dset,"-vs-gcm-summaryMetrics.csv",sep=""))) {
createColoured(fDir=f.dir, variable=vn, dataset=dset, month="total", period=prd, metric="R2.FORCED")
}
}
}
}
f.dir <- "D:/cenavarro/msc_gis_thesis/01_baseline/skill_gcm/_summaries"
generateBoxplots(fd=f.dir)
for (vn in variableLs) {
for (dset in c("whst", "wcl")) {
for (prd in c("ANNUAL","DJF","JJA","MAM","SON")) {
if (file.exists(paste(f.dir,"/",vn,"-",dset,"-vs-gcm-summaryMetrics.csv",sep=""))) {
createColoured(fDir=f.dir, variable=vn, dataset=dset, month="total", period=prd, metric="R2.FORCED")
}
}
}
}
#Summaries
source("summariseComparisons.R")
f.dir <- "D:/cenavarro/msc_gis_thesis/01_baseline/skill_gcm/_summaries"
generateBoxplots(fd=f.dir)
for (vn in variableLs) {
for (dset in c("whst", "wcl")) {
for (prd in c("ANNUAL","DJF","JJA","MAM","SON")) {
if (file.exists(paste(f.dir,"/",vn,"-",dset,"-vs-gcm-summaryMetrics.csv",sep=""))) {
createColoured(fDir=f.dir, variable=vn, dataset=dset, month="total", period=prd, metric="R2.FORCED")
}
}
}
}
createColoured(fDir=f.dir, variable=vn, dataset=dset, month="total", period=prd, metric="R2.FORCED")
f.dir <- "D:/cenavarro/msc_gis_thesis/01_baseline/skill_gcm/_summaries"
generateBoxplots(fd=f.dir)
for (vn in variableLs) {
for (dset in c("whst", "wcl")) {
for (prd in c("ANNUAL","DJF","JJA","MAM","SON")) {
if (file.exists(paste(f.dir,"/",vn,"-",dset,"-vs-gcm-summaryMetrics.csv",sep=""))) {
createColoured(fDir=f.dir, variable=vn, dataset=dset, month="total", period=prd, metric="R2.FORCED")
}
}
}
}
